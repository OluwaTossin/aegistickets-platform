name: Build and Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  build-and-scan:
    name: Build and Scan ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Set up Python
        if: matrix.service == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: app/backend/requirements.txt

      - name: Run tests - Frontend
        if: matrix.service == 'frontend'
        run: |
          cd app/frontend
          npm ci
          npm test -- --run --coverage

      - name: Run tests - Backend
        if: matrix.service == 'backend'
        run: |
          cd app/backend
          pip install -r requirements.txt
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.service == 'frontend' && 'javascript' || 'python' }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aegistickets-lite/${{ matrix.service }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            app/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/aegistickets-lite/${{ matrix.service }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image to ECR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aegistickets-lite/${{ matrix.service }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Output image URI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Image pushed: ${{ steps.login-ecr.outputs.registry }}/aegistickets-lite/${{ matrix.service }}:sha-${{ github.sha }}"
