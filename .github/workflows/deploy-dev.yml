name: Deploy to Dev

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      cluster-name: ${{ steps.tf-output.outputs.cluster_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init
        run: |
          cd infra/envs/dev
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/envs/dev
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra/envs/dev
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-output
        run: |
          cd infra/envs/dev
          echo "cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          terraform output

  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ needs.deploy-infrastructure.outputs.cluster-name }} --region eu-west-1

      - name: Create namespace and apply base manifests
        run: |
          kubectl apply -f deploy/manifests/namespace-dev.yaml
          kubectl apply -f deploy/manifests/external-secret-dev.yaml
          kubectl apply -f deploy/manifests/monitoring/prometheus-rules.yaml

      - name: Deploy backend
        env:
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          helm upgrade --install backend deploy/helm/backend \
            -n tickets-dev \
            -f deploy/helm/backend/values-dev.yaml \
            --set image.tag=$IMAGE_TAG \
            --wait --timeout 5m

      - name: Deploy frontend
        env:
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          helm upgrade --install frontend deploy/helm/frontend \
            -n tickets-dev \
            -f deploy/helm/frontend/values-dev.yaml \
            --set image.tag=$IMAGE_TAG \
            --wait --timeout 5m

      - name: Apply ingress
        run: |
          kubectl apply -f deploy/manifests/ingress-dev.yaml

      - name: Get ALB DNS
        run: |
          echo "Waiting for ALB to be provisioned..."
          sleep 30
          ALB_DNS=$(kubectl -n tickets-dev get ingress tickets-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Application URL: http://$ALB_DNS"
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Dev" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** sha-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Application URL:** http://$ALB_DNS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Deployed Services" >> $GITHUB_STEP_SUMMARY
          kubectl -n tickets-dev get pods -o wide >> $GITHUB_STEP_SUMMARY
